@startuml class

interface ICommand {
    Execute() : CommandResult
}

abstract class CommandResult {
    Success : bool
}

class ValueCommandResult
CommandResult <|-- ValueCommandResult

class ListCommandResult
CommandResult <|-- ListCommandResult

class MapCommandResult
CommandResult <|-- MapCommandResult

class FailedCommandResult
CommandResult <|-- FailedCommandResult

ICommand --> CommandResult

interface ICommandFactory {
    Create(:CommandInput) : ICommand
}

interface ICommandRegistry {
    Register(:Type)
    Resolve(commandName : string) : Type
}

ICommandFactory -- ICommand

class CommandRegistry implements ICommandRegistry {
    ctor()
    ctor(:ICommandRegistry)
}
CommandRegistry --> ICommandRegistry

class CommandFactory implements ICommandFactory
CommandFactory o-- ICommandRegistry

interface INameValidator {
    IsValid(name : string) : bool
}

class NameValidator implements INameValidator

CommandRegistry *-- INameValidator

@enduml