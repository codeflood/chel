@startuml class

interface ICommand {
    ExecuteAsync() : Task<CommandResult>
}

abstract class CommandResult {
    Success : bool
}

class ValueCommandResult
CommandResult <|-- ValueCommandResult

class ListCommandResult
CommandResult <|-- ListCommandResult

class MapCommandResult
CommandResult <|-- MapCommandResult

class FailedCommandResult
CommandResult <|-- FailedCommandResult

ICommand --> CommandResult

interface ICommandFactory {
    Create(:CommandInput) : ICommand
}

ICommandFactory -- ICommand

class CommandDescriptor {
    ImplementingType : Type
    CommandName : string
}

interface ICommandRegistry {
    Register(:Type)
    Resolve(commandName : string) : CommandDescriptor
    GetAllRegistrations() : IEnumerable<CommandDescriptor>
}

ICommandRegistry *-- CommandDescriptor

class CommandRegistry implements ICommandRegistry {
    ctor()
    ctor(:ICommandRegistry)
}
CommandRegistry --> ICommandRegistry

class CommandFactory implements ICommandFactory
CommandFactory o-- ICommandRegistry
CommandFactory o-- ICommandServices

interface INameValidator {
    IsValid(name : string) : bool
}

class NameValidator implements INameValidator

CommandRegistry *-- INameValidator

interface ISession {
    Execute(input : string, resultHandler : Action<CommandResult>)
}

ISession --> CommandResult

class Session implements ISession

Session *-- ICommandFactory
Session *-- IParser

interface ICommandServices {
    Register(:object)
    Resolve(:Type) : object
}

class CommandServices implements ICommandServices

class Runtime {
    RegisterCommandType(:Type)
    RegisterCommandService<T>(:T)
    NewSession() : ISession
}

Runtime o-- ISession
Runtime *-- ICommandRegistry
Runtime *-- ICommandServices

@enduml
